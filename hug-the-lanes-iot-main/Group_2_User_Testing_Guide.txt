Import the entire project folder into VS Code or your preferred IDE. Open the ‘gui’ file. Select Run without debugging and the window should appear. Select a profile for quick testing and then you will enter the “StartPage” in which you must select a log on method for the selected profile. To access the Driver Display enter the correct credentials in the “Pin” page or use either of the VoiceID or TouchID verification methods. If you want to skip to the driver display there is a button in the bottom right that is there expressly for testing purposes and would not be implemennted in a customer’s final product. Once in the “Display” page you will see the rest of our features and their respective implementations. Some buttons toggle on/off the feature and others initiate processes. As buttons are pressed the display will provide necessary warnings and popups. 

Other functionalities:
	Tech View:
		In order to see the tech view select and profile, select the “Pin” sign on option and enter “tech”. This will grant you access 	to the technician view. In this view you can open logs and see the current state of the sensor values being read in the “read.py” 	file. The read file stores the values into a .json file titled ‘log.json’. Select either button and a window allowing you to select a file 	for viewing will open. Choose the either log file and it will be displayed in the text box on the main window. If you select one after the other, the 	second selection will appear as well just scroll on the text box to see those logs.
	
	Registration:
		A page that allows you to create new profiles. Not on the document just started programming it since I had a little time. If you want to try 	it out you can but the profile won’t be stored after you close the program since I didn’t have time to finish it.

I’m on a Mac and I had to make sure VS Code was using python 3.1x for the gui to display. If you’re presented with a black or blank window just double check that and it should fix it.

————————HOW TO TEST ————————
Open the file called ‘input.py’. Currently it holds random values for demonstration purposes but if you want to test specific values just replace the ‘random.choice[…]’ with a bool. As for the other random’s you can enter an integer and test the read file’s response by restarting the GUI. We already tested the program without random values so we changed it to be ‘random.choice’ so we didn’t have to have a ton of test files. When testing the GUI login methods (Voice ID, Touch ID, and Pin) the profile’s stored values for each of those print to the console after you confirm your selection on the Landing page. This would obviously not be in the final product but its so that you can know what the expected value is for the given profiles. There are 4 profiles that will appear every time and they are there so you can test any combination of Touch ID and Voice ID permissions. No preset profile contains and invalid profile name or pin because hat would not pass the registration page’s checks if a user creates a new profile. Our test values submitted on the document have been validated but for your sake we consolidated the file for the final submission. 
